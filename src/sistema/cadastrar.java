package sistema;


import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author senac
 */
public class cadastrar extends javax.swing.JFrame implements KeyListener {
final DefaultTableModel modelo = new DefaultTableModel();

    public cadastrar() {
        modelo.addColumn("nome");
	modelo.addColumn("vaga");
	modelo.addColumn("carga");
	modelo.addColumn("valor");
        modelo.addColumn("codigo_curso");
        modelo.addColumn("turno");
 
         
        initComponents();
        DefaultTableModel modelo = (DefaultTableModel) tabelacurso.getModel();
        
        modelo.setRowCount(0);
        try {
            // Inicia a conexão e o Statement
            Connection connection = new sistema.Conexao().getConnection();
            System.out.println("Conexão aberta!");
            PreparedStatement stmt = connection.prepareStatement("select * from curso");
            // executa comando
            ResultSet rs = stmt.executeQuery();
            // Define resultados
            while (rs.next()) {
                String nome = rs.getString("nome");
                String vaga= rs.getString("vaga");
                String carga = rs.getString("carga");
                String valor = rs.getString("valor");
                String codigo = rs.getString("codigo_curso");
                String turno = rs.getString("turno");
               
                modelo.addRow(new Object[]{codigo,nome,vaga,carga,valor,turno});
            }
            rs.close();
            stmt.close();
            connection.close();
            System.out.println("Conexão fechada!");
        } catch (Exception e) {
            System.out.println("Deu erro!");
        }  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulocurso = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelacurso = new javax.swing.JTable();
        painel = new javax.swing.JPanel();
        nomecurso = new javax.swing.JLabel();
        Cargahoraria = new javax.swing.JLabel();
        valorcurso = new javax.swing.JLabel();
        camponomecurso = new javax.swing.JTextField();
        campocargacurso = new javax.swing.JTextField();
        vagascurso = new javax.swing.JLabel();
        campovagascurso = new javax.swing.JTextField();
        btExcluir = new javax.swing.JButton();
        btInserir = new javax.swing.JButton();
        erro_campo_nome = new javax.swing.JLabel();
        erro_campo_vaga = new javax.swing.JLabel();
        erro_campo_carga = new javax.swing.JLabel();
        erro_campo_valor = new javax.swing.JLabel();
        obrigatorionome = new javax.swing.JLabel();
        obrigatoriovagas = new javax.swing.JLabel();
        obrigatoriocarga = new javax.swing.JLabel();
        obrigatoriovalor = new javax.swing.JLabel();
        btAlterar = new javax.swing.JButton();
        turnocurso = new javax.swing.JLabel();
        campoturnocurso = new javax.swing.JTextField();
        erro_campo_turno = new javax.swing.JLabel();
        obrigatorioturno = new javax.swing.JLabel();
        campovalorcurso = new javax.swing.JTextField();
        codigocurso = new javax.swing.JLabel();
        campocod = new javax.swing.JLabel();
        Mensagem = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setTitle("Cadastro de cursos");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximizedBounds(new java.awt.Rectangle(840, 450, 840, 450));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titulocurso.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        titulocurso.setText("Cadastrar Curso");
        getContentPane().add(titulocurso, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 201, -1));

        tabelacurso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Nome", "Vagas", "Carga", "Valor", "Turno"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelacurso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabelacursoMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tabelacurso);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 813, 89));

        painel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        nomecurso.setText("Nome curso");

        Cargahoraria.setText("Carga horaria");

        valorcurso.setText("Valor curso");

        camponomecurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                camponomecursoKeyPressed(evt);
            }
        });

        campocargacurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campocargacursoKeyPressed(evt);
            }
        });

        vagascurso.setText("Quant Vagas");

        campovagascurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campovagascursoKeyPressed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btInserir.setText("Inserir");
        btInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInserirActionPerformed(evt);
            }
        });

        erro_campo_nome.setForeground(new java.awt.Color(255, 0, 0));

        erro_campo_vaga.setForeground(new java.awt.Color(255, 0, 0));

        erro_campo_carga.setForeground(new java.awt.Color(255, 0, 0));

        erro_campo_valor.setForeground(new java.awt.Color(255, 0, 0));

        obrigatorionome.setForeground(new java.awt.Color(255, 0, 0));
        obrigatorionome.setText("oioi");

        obrigatoriovagas.setForeground(new java.awt.Color(255, 0, 0));

        obrigatoriocarga.setForeground(new java.awt.Color(255, 0, 0));

        obrigatoriovalor.setForeground(new java.awt.Color(255, 0, 0));

        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        turnocurso.setText("Turno curso");

        campoturnocurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campoturnocursoKeyPressed(evt);
            }
        });

        erro_campo_turno.setForeground(new java.awt.Color(255, 0, 0));

        obrigatorioturno.setForeground(new java.awt.Color(255, 0, 0));

        campovalorcurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campovalorcursoKeyPressed(evt);
            }
        });

        codigocurso.setText("Codigo curso");

        campocod.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelLayout.createSequentialGroup()
                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(turnocurso)
                                .addGap(17, 17, 17))
                            .addGroup(painelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Cargahoraria)
                                    .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(vagascurso)
                                        .addComponent(nomecurso)
                                        .addComponent(codigocurso)))
                                .addGap(4, 4, 4)))
                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelLayout.createSequentialGroup()
                                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(painelLayout.createSequentialGroup()
                                        .addComponent(campovagascurso, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(obrigatoriovagas, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(camponomecurso, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(painelLayout.createSequentialGroup()
                                        .addComponent(campocargacurso, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(painelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(obrigatoriocarga, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelLayout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(obrigatoriovalor, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(337, 337, 337)
                                .addComponent(obrigatorionome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(painelLayout.createSequentialGroup()
                                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campocod, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(painelLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(erro_campo_turno, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(painelLayout.createSequentialGroup()
                                                .addComponent(campoturnocurso, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(3, 3, 3)
                                                .addComponent(obrigatorioturno, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(119, 119, 119)
                                                .addComponent(btInserir)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btAlterar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btExcluir)))))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(painelLayout.createSequentialGroup()
                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(valorcurso)
                                .addGap(18, 18, 18)
                                .addComponent(campovalorcurso, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelLayout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(erro_campo_valor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(erro_campo_vaga, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(erro_campo_carga, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(erro_campo_nome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codigocurso)
                    .addComponent(campocod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(camponomecurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomecurso)
                    .addComponent(obrigatorionome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(erro_campo_nome)
                .addGap(5, 5, 5)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(vagascurso)
                        .addComponent(campovagascurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(obrigatoriovagas, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(erro_campo_vaga)
                .addGap(10, 10, 10)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campocargacurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(obrigatoriocarga)
                    .addComponent(Cargahoraria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(erro_campo_carga)
                .addGap(9, 9, 9)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valorcurso)
                    .addComponent(obrigatoriovalor)
                    .addComponent(campovalorcurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(erro_campo_valor)
                .addGap(18, 18, 18)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btAlterar)
                        .addComponent(btInserir)
                        .addComponent(btExcluir))
                    .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(campoturnocurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(turnocurso)
                        .addComponent(obrigatorioturno)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(erro_campo_turno)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        getContentPane().add(painel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 800, 280));

        Mensagem.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Mensagem.setForeground(new java.awt.Color(255, 51, 0));
        Mensagem.setText("Para alterar ou excluir dados selecione a linha codigo");
        getContentPane().add(Mensagem, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 570, -1));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoturnocursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoturnocursoKeyPressed

        String cod_curso = campoturnocurso.getText();
        JLabel erro_turno = erro_campo_turno;

        if (cod_curso.matches(".*[0-9].*")){
            erro_turno.setText("Digite apenas letras no campo.*");
            return;
        }else {
            erro_turno.setText("");
        }

        int quantCaracteres = cod_curso.length();
        if (quantCaracteres >= 5){
            cod_curso = cod_curso.substring (0, cod_curso.length() - 1);
            campoturnocurso.setText(cod_curso);
        }
        
        
        DefaultTableModel modelo = (DefaultTableModel) tabelacurso.getModel();
        modelo.setRowCount(0);
        try {
            // Inicia a conexão e o Statement
            Connection connection = new sistema.Conexao().getConnection();
            System.out.println("Conexão aberta!");
            com.mysql.jdbc.PreparedStatement stmt = (com.mysql.jdbc.PreparedStatement) connection.prepareStatement("select * from curso");
            // executa comando
            ResultSet rs = stmt.executeQuery();
            // Define resultados
            while (rs.next()) {
                String nome1 = rs.getString("nome");
                String vaga1 = rs.getString("vaga");
                String carga1 = rs.getString("carga");
                String valor1 = rs.getString("valor");
                String codigo1 = rs.getString("codigo_curso");
                String turno1 = rs.getString("turno");

                modelo.addRow(new Object[]{codigo1,nome1,vaga1,carga1,valor1,turno1});
            }
            rs.close();
            stmt.close();
            connection.close();
            System.out.println("Conexão fechada!");
        } catch (Exception e) {
        }

    }//GEN-LAST:event_campoturnocursoKeyPressed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
    
        
        
         // traamento de campo vazio
 
        JLabel obrig_nome = obrigatorionome;
        JLabel obrig_vaga = obrigatoriovagas;
        JLabel obrig_carga = obrigatoriocarga;
        JLabel obrig_valor = obrigatoriovalor;
        JLabel obrig_turno = obrigatorioturno;
        

        if       (camponomecurso.getText().equals("") ){
            camponomecurso.requestFocus();
            obrig_nome.setText("Este campo é obrigatorio*");return;}

        else if  (campovagascurso.getText().equals("") ){
            campovagascurso.requestFocus();
            obrig_vaga.setText("Este campo é obrigatorio*");return;}

        else if (campocargacurso.getText().equals("") ){
            campocargacurso.requestFocus();
            obrig_carga.setText("CampoEste campo é obrigatorio*");return;}
        
        else if (campovalorcurso.getText().equals("") ){
                 campovalorcurso.requestFocus();
            obrig_valor.setText("Este campo é obrigatorio*");return;}

        else if (campoturnocurso.getText().equals("") ){
            campoturnocurso.requestFocus();
            obrig_turno.setText("Este campo é obrigatorio*");return;}
        
        
        

        else {
            obrig_nome.setText("");
            obrig_carga.setText("");
            obrig_vaga.setText("");
            obrig_valor.setText("");
            
           }
        
        
        // Tratamento de letras e numeros 
        String alterarnome = camponomecurso.getText();
        String alterarvaga = campovagascurso.getText();
        String alterarcarga = campocargacurso.getText();
        String alterarvalor = campovalorcurso.getText();
        String alterarturno = campoturnocurso.getText();
      

        JLabel erronome = erro_campo_nome;
        JLabel errovaga = erro_campo_vaga;
        JLabel errocarga = erro_campo_valor;
        JLabel errovalor = erro_campo_valor;
        JLabel erroturno = erro_campo_turno;
       

        if (alterarnome.matches(".*[0-9].*")){
            erronome.setText("Coloque apenas letras no campo.");return;}

        else if(alterarvaga.matches(".*[a-z].*")){
            errovaga.setText("Coloque apenas letras no campo.");return;}

        else if(alterarcarga.matches(".*[a-z].*")){
            errocarga.setText("Coloque apenas números no campos.");return;}

        else if(alterarvalor.matches(".*[a-z].*")){
            errovalor.setText("Coloque apenas números no campo.");return;}


        else if (campoturnocurso.getText().equals("") ){
            campoturnocurso.requestFocus();
            erroturno.setText("Este campo é obrigatorio*");return;}

        else{
            erronome.setText("");
            errovaga.setText("");
            errocarga.setText("");
            errovalor.setText("");
            erroturno.setText("");}
          

            try{
                
            int linha = tabelacurso.getSelectedRow();
            int coluna = tabelacurso.getSelectedColumn();
            String resultado = (String) tabelacurso.getValueAt(linha, coluna);
                
            Connection conexao = new Conexao().getConnection();                                                        
            PreparedStatement stmt = conexao.prepareStatement("update curso set nome='"+alterarnome+"', vaga="+alterarvaga+", carga='"+alterarcarga+"', valor='"+alterarvalor+"', turno='"+alterarturno+"' where codigo_curso="+resultado+";");
            stmt.executeUpdate();
            conexao.close();
            JOptionPane.showMessageDialog(null, "Atualizado com sucesso!!!");
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, "Deu Erro ao excluir: "+e+"!");
        }
            
             try{
                 modelo.getDataVector().removeAllElements();
            Connection conexao = new Conexao().getConnection();   
            
            PreparedStatement stmt = conexao.prepareStatement("SELECT * FROM curso;");
            ResultSet rs = stmt.executeQuery(); 
	    
            while(rs.next())
            {
		String nome1 = rs.getString("nome");
                String vaga1 = rs.getString("vaga");
                String carga1 = rs.getString("carga");
                String valor1 = rs.getString("valor");
                String codigo1 = rs.getString("codigo_curso");
                String turno1 = rs.getString("turno");

                modelo.addRow(new Object[]{codigo1,nome1,turno1,vaga1,carga1,valor1});
            }
           
            conexao.close();
         }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, "Deu erro ao atualizar: " + e +"!");                        
        }
        
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInserirActionPerformed

        String nome = camponomecurso.getText();
        String vaga =  campovagascurso.getText();
        String carga =  campocargacurso.getText();
        String valor =  campovalorcurso.getText();
        String turno =  campoturnocurso.getText();
        
        JLabel obrig_nome = obrigatorionome;
        JLabel obrig_vaga = obrigatoriovagas;
        JLabel obrig_carga = obrigatoriocarga;
        JLabel obrig_valor = obrigatoriovalor;
        JLabel obrig_turno = obrigatorioturno;
        
        JLabel erronome = erro_campo_nome;
        JLabel errovaga = erro_campo_vaga;
        JLabel errocarga = erro_campo_carga;
        JLabel errovalor = erro_campo_valor;
        JLabel erroturno = erro_campo_turno;
        
      
        if       (camponomecurso.getText().equals("") ){
            camponomecurso.requestFocus();
            obrig_nome.setText("Este campo é obrigatorio*");return;}

        else if  (campovagascurso.getText().equals("") ){
            campovagascurso.requestFocus();
            obrig_vaga.setText("Este campo é obrigatorio*");return;}

        else if (campocargacurso.getText().equals("") ){
            campocargacurso.requestFocus();
            obrig_carga.setText("Este campo é obrigatorio*");return;}
        
        else if (campovalorcurso.getText().equals("") ){
            campovalorcurso.requestFocus();
            obrig_valor.setText("Este campo é obrigatorio*");return;}
        
        else if (campoturnocurso.getText().equals("") ){
            campoturnocurso.requestFocus();
            obrig_turno.setText("Este campo é obrigatorio*");return;}
        
        
        else if (campoturnocurso.getText().equals("") ){
            campoturnocurso.requestFocus();
            erroturno.setText("Este campo é obrigatorio*");return;}
        
        
        else  if (nome.matches(".*[0-9].*")){
            JOptionPane.showMessageDialog(null, "Erro ao inserir dado", "Erro ", JOptionPane.ERROR_MESSAGE);;return;}
        
        else if(vaga.matches(".*[a-z].*")){
            JOptionPane.showMessageDialog(null, "Erro ao inserir dado", "Erro ", JOptionPane.ERROR_MESSAGE);;return;}
        
        else if(carga.matches(".*[a-z].*")){
           JOptionPane.showMessageDialog(null, "Erro ao inserir dado", "Erro ", JOptionPane.ERROR_MESSAGE);return;}

        else if(valor.matches(".*[a-z].*")){
            JOptionPane.showMessageDialog(null, "Erro ao inserir dado", "Erro ", JOptionPane.ERROR_MESSAGE);;return;}
        
        else if(turno.matches(".*[0-9].*")){
            JOptionPane.showMessageDialog(null, "Erro ao inserir dado", "Erro ", JOptionPane.ERROR_MESSAGE);;return;}
          
        
        
       else {
         obrig_nome.setText("");
         obrig_carga.setText("");
         obrig_vaga.setText("");
         obrig_valor.setText("");
         obrig_turno.setText("");
         erronome.setText("");
         errovaga.setText("");
         errocarga.setText("");
         errovalor.setText("");
         erroturno.setText("");
       }

        try {
            // Inicia a conexão e o Statement
            Connection connection = new Conexao().getConnection();
            System.out.println("Conexão aberta!");
            com.mysql.jdbc.PreparedStatement stmt = (com.mysql.jdbc.PreparedStatement) connection.prepareStatement("insert into curso (nome,vaga,carga,valor,turno) values "
                + "('"+nome+"','"+vaga+"','"+carga+"','"+valor+"','"+turno+"')");
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(null,"Registro feito com sucesso","Aviso", JOptionPane.INFORMATION_MESSAGE);
            stmt.close();
            //Fecha a conexão
            connection.close();
            System.out.println("Conexão fechada!");   
        }      
             catch (SQLException e) {
            e.printStackTrace();
         JOptionPane.showMessageDialog(null, "Erro ao inserir dado", "Erro ", JOptionPane.ERROR_MESSAGE);
             }
        
        
        DefaultTableModel modelo = (DefaultTableModel) tabelacurso.getModel();
        modelo.setRowCount(0);
        try {
            // Inicia a conexão e o Statement
            Connection connection = new sistema.Conexao().getConnection();
            System.out.println("Conexão aberta!");
            com.mysql.jdbc.PreparedStatement stmt = (com.mysql.jdbc.PreparedStatement) connection.prepareStatement("select * from curso");
            // executa comando
            ResultSet rs = stmt.executeQuery();
            // Define resultados
            while (rs.next()) {
                String nome1 = rs.getString("nome");
                String vaga1 = rs.getString("vaga");
                String carga1 = rs.getString("carga");
                String valor1 = rs.getString("valor");
                String codigo1 = rs.getString("codigo_curso");
                String turno1 = rs.getString("turno");

                modelo.addRow(new Object[]{codigo1,nome1,vaga1,carga1,valor1,turno1});
            }
            rs.close();
            stmt.close();
            connection.close();
            System.out.println("Conexão fechada!");
        } catch (Exception e) {
        }
        
        
    }//GEN-LAST:event_btInserirActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed

       if (tabelacurso.getSelectedRowCount() != 0) {
            
            int linha = tabelacurso.getSelectedRow();
            int coluna = tabelacurso.getSelectedColumn();
            String resultado = (String) tabelacurso.getValueAt(linha, coluna);
            String codigo = "Tem certeza que deseja deletar o\nRegistro do curso " + tabelacurso.getValueAt(linha, 1).toString() + "?";
                int opcao_escolhida = JOptionPane.showConfirmDialog(null, codigo, "Exclusão ", JOptionPane.YES_NO_OPTION);
                if (opcao_escolhida == JOptionPane.YES_OPTION) {
            String sql = "DELETE FROM curso WHERE codigo_curso="+resultado+";";
            try{
                Connection conexao = new Conexao().getConnection();
                PreparedStatement stmt = conexao.prepareStatement(sql);
		stmt.executeUpdate(); 
	        conexao.close();
                JOptionPane.showMessageDialog(null,"Registro Excluído!");
		}
            catch(Exception e)
                {
                JOptionPane.showMessageDialog(null, "Selecione a coluna 'Codigo'");
		}
                }else{
                   return; 
                }
            
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada");
        }
        modelo.setRowCount(0);
        String sql = "SELECT * FROM curso";
        
        DefaultTableModel modelo = (DefaultTableModel) tabelacurso.getModel();
        modelo.setRowCount(0);
       
        try {
            // Inicia a conexão e o Statement
            Connection connection = new sistema.Conexao().getConnection();
            System.out.println("Conexão aberta!");
            PreparedStatement stmt = connection.prepareStatement("select * from curso");
            // executa comando
            ResultSet rs = stmt.executeQuery();
            // Define resultados
            while (rs.next()) {
                
                String codigo = rs.getString("codigo_curso");
                String vaga = rs.getString("vaga");
                String nome = rs.getString("nome");
                String turno = rs.getString("turno");
                String carga = rs.getString("carga");
                String valor = rs.getString("valor");
                
                modelo.addRow(new Object[]{codigo,nome,vaga,carga,valor,turno});
            }
            rs.close();
            stmt.close();
            connection.close();
            System.out.println("Conexão fechada!");
        } catch (Exception e) {
            System.out.println("Deu erro!");
            JOptionPane.showMessageDialog(null, "Erro ao excluir dados", "Erro ", JOptionPane.ERROR_MESSAGE);
        } 
        
        
        DefaultTableModel mds = (DefaultTableModel) tabelacurso.getModel();
        mds.setRowCount(0);
        try {
            // Inicia a conexão e o Statement
            Connection connection = new sistema.Conexao().getConnection();
            System.out.println("Conexão aberta!");
            com.mysql.jdbc.PreparedStatement stmt = (com.mysql.jdbc.PreparedStatement) connection.prepareStatement("select * from curso");
            // executa comando
            ResultSet rs = stmt.executeQuery();
            // Define resultados
            while (rs.next()) {
                String nome1 = rs.getString("nome");
                String vaga1 = rs.getString("vaga");
                String carga1 = rs.getString("carga");
                String valor1 = rs.getString("valor");
                String codigo1 = rs.getString("codigo_curso");
                String turno1 = rs.getString("turno");

                mds.addRow(new Object[]{codigo1,nome1,vaga1,carga1,valor1,turno1});
            }
            rs.close();
            stmt.close();
            connection.close();
            System.out.println("Conexão fechada!");
        } catch (Exception e) {
        }
        
    }//GEN-LAST:event_btExcluirActionPerformed

    private void campovagascursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campovagascursoKeyPressed

        String vaga_curso =    campovagascurso.getText();
        JLabel erro_vaga = erro_campo_vaga;

        if  (vaga_curso.matches(".*[a-z].*")){
            erro_vaga.setText("Digite apenas numero no campo.");return;
        }
        else{
            erro_vaga.setText("");
        }

        int quantCaracteres = vaga_curso.length();
        if (quantCaracteres >= 4){
            vaga_curso = vaga_curso.substring (0, vaga_curso.length() - 1);
            campovagascurso.setText(vaga_curso);
        }
    }//GEN-LAST:event_campovagascursoKeyPressed

    private void campocargacursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campocargacursoKeyPressed

        String carga_horario =   campocargacurso.getText();
        JLabel erro_horario = erro_campo_carga;

        if  ( carga_horario.matches(".*[a-z].*")){
            erro_horario.setText("Digite apenas numero no campo.*");return;
        }
        else {
            erro_horario.setText("");
        }

        int quantCaracteres = carga_horario.length();
        if (quantCaracteres >= 10){
            carga_horario = carga_horario.substring (0, carga_horario.length() - 1);
            campocargacurso.setText(carga_horario);
        }
    }//GEN-LAST:event_campocargacursoKeyPressed

    private void camponomecursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_camponomecursoKeyPressed

        String nome_curso = camponomecurso.getText();
        JLabel erro_nome = erro_campo_nome;

        if (nome_curso.matches(".*[0-9].*")){
            erro_nome.setText("Digite apenas letras no campo.*");return;
        }else {
            erro_nome.setText("");
        }

        int quantCaracteres =nome_curso.length();
        if (quantCaracteres >= 40){
            nome_curso = nome_curso.substring (0, nome_curso.length() - 1);
            camponomecurso.setText(nome_curso);
        }
    }//GEN-LAST:event_camponomecursoKeyPressed

    private void campovalorcursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campovalorcursoKeyPressed
      
        String valor_curso = campovalorcurso.getText();
        JLabel erro_valor = erro_campo_valor;

        if (valor_curso.matches(".*[a-z].*")){
            erro_valor.setText("Digite apenas letras no campo.*");return;
        }else {
            erro_valor.setText("");
        }

        int quantCaracteres =valor_curso.length();
        if (quantCaracteres >= 8){
            valor_curso = valor_curso.substring (0, valor_curso.length() - 1);
            campovalorcurso.setText(valor_curso);
        }
        
    }//GEN-LAST:event_campovalorcursoKeyPressed

    private void tabelacursoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelacursoMousePressed
      
        if (tabelacurso.getSelectedRowCount() != 0) {
            
            int linha = tabelacurso.getSelectedRow();
            int coluna = tabelacurso.getSelectedColumn();
            String resultado = (String) tabelacurso.getValueAt(linha, coluna);
           campocod.setText(resultado);
            
            String sql = "select * FROM curso WHERE codigo_curso="+resultado+";";
            
            try {
            Connection conexao = new Conexao().getConnection();               
            PreparedStatement stmt = conexao.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(); 
	    
            while(rs.next()) {
            
		
		String nome = rs.getString("nome");
		String vagas = rs.getString("vaga");
		String carga = rs.getString("carga");
                String valor = rs.getString("valor");
                String turno = rs.getString("turno");
              
               
                
                camponomecurso.setText(nome);
                campovagascurso.setText(vagas);
                campocargacurso.setText(carga);
                campovalorcurso.setText(valor);
                campoturnocurso.setText(turno);
            }
            
            conexao.close();
         }
        catch(SQLException e) {
             JOptionPane.showMessageDialog(null, "Selecione a linha codigo ", "Erro ", JOptionPane.ERROR_MESSAGE);                        
        }
        }
        
        
    }//GEN-LAST:event_tabelacursoMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cadastrar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Cargahoraria;
    private javax.swing.JLabel Mensagem;
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btInserir;
    private javax.swing.JTextField campocargacurso;
    private javax.swing.JLabel campocod;
    private javax.swing.JTextField camponomecurso;
    private javax.swing.JTextField campoturnocurso;
    private javax.swing.JTextField campovagascurso;
    private javax.swing.JTextField campovalorcurso;
    private javax.swing.JLabel codigocurso;
    private javax.swing.JLabel erro_campo_carga;
    private javax.swing.JLabel erro_campo_nome;
    private javax.swing.JLabel erro_campo_turno;
    private javax.swing.JLabel erro_campo_vaga;
    private javax.swing.JLabel erro_campo_valor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nomecurso;
    private javax.swing.JLabel obrigatoriocarga;
    private javax.swing.JLabel obrigatorionome;
    private javax.swing.JLabel obrigatorioturno;
    private javax.swing.JLabel obrigatoriovagas;
    private javax.swing.JLabel obrigatoriovalor;
    private javax.swing.JPanel painel;
    private javax.swing.JTable tabelacurso;
    private javax.swing.JLabel titulocurso;
    private javax.swing.JLabel turnocurso;
    private javax.swing.JLabel vagascurso;
    private javax.swing.JLabel valorcurso;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

 
}
